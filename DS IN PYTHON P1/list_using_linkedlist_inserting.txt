class Node:
    def __init__(self,data):
        self.__data=data
        self.__next=None
    
    def get_data(self):
        return self.__data
    
    def set_data(self,data):
        self.__data=data
    
    def get_next(self):
        return self.__next
    
    def set_next(self,next_node):
        self.__next=next_node

class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None
    
    def get_head(self):
        return self.__head
    
    def get_tail(self):
        return self.__tail
    
    def add(self,data):
        newnode=Node(data)
        if(self.__head==None):
            self.__head=self.__tail=newnode
        else:
            self.__tail.set_next(newnode)
            self.__tail=newnode
        #Remove pass and copy the code you had written to add an element.
    
    def display(self):
        itr=self.get_head()
        while(itr):
            print(itr.get_data())
            itr=itr.get_next()
        #Remove pass and copy the code you had written to display the element(s).
    
    def find_node(self,data):
        itr=self.get_head()
        while(itr):
            if(itr.get_data()==data):
                return True
            itr=itr.get_next()
        return False
        #Remove pass and copy the code you had written to find the node containing the element.
    
    def insert(self,data,data_before):
        newnode=Node(data)
        if(self.find_node(data_before)):
            itr=self.get_head()
            while(itr):
                if(itr.get_data()==data_before):
                    itr.set_next(newnode)
                    newnode.set_next(itr)
                else:
                    itr=itr.get_next()
            # self.display()
        else:
            print('error')
                    
        #Remove pass and write the logic to insert an element.
                                              
    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        temp=self.__head
        msg=[]
        while(temp is not None):
           msg.append(str(temp.get_data()))
           temp=temp.get_next()
        msg=" ".join(msg)
        msg="Linkedlist data(Head to Tail): "+ msg
        return msg


list1=LinkedList()
list1.add('Sugar')
list1.add('salt')
list1.add('soap')
#Add all the required element(s)
#Insert the element in the required position
list1.insert("NewItem","Sugar")
list1.display()
                                              