'''The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

Write a python program to find and display the number of circular primes less than the given limit.'''


#PF-Assgn-57
def check_prime(number):
    count=0
    if(number==1):
        return False
    else:
        for i in range(2,number+1):
            if(number%i==0):
                count+=1
        if(count==1):
            return True
        else:
            return False#remove pass and write your logic here. if the number is prime return true, else return false

def rotations(num):
    check=str(num)
    digit=0
    i=0
    rem=0
    sum=0
    length=len(check)
    num1=int(check)
    while(i<length):
        rem=int(num1 % 10)
        num1=int(num1 / 10)
        num1=int((rem * (10 ** (length - 1)) + num1))
        digit=check_prime(num1)
        sum=sum+digit
        i+=1
    if(sum==length):
        return True
     #remove pass and write your logic here. It should return the list of different combinations of digits of the given number.
    	#Rotation should be done in clockwise direction. For example, if the given number is 197, the list returned should be [197, 971, 719]

def get_circular_prime_count(limit):
    count=0
    for i in range(limit):
        if(rotations(i)):
            count+=1
    return count#remove pass and write your logic here.It should return the count of circular prime numbers below the given limit.

#Provide different values for limit and test your program
print(get_circular_prime_count(1000))